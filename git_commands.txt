1. git config
	This command will set up your identity - Name and Email address.
	And this information will be used with every commit.

Usage

	$ git config --global user.name "Your name"  
	$ git config --global user.email "Your email"


2. git init
	This is probably the first command you use to start a new project in Git.
	This command will create a blank new repository, and then you can store 
	your source code inside this repo.

Usage  
	$ git init 

	Or you can use the repository name with your git init command.

		$ git init <your repository name>


3. git clone
	The git clone command will use an existing repository to copy. 
	There is one main difference between the git init and git clone. 
	You will use the Git clone when you need to make a copy on an 
	existing repository. 
   The git clone command internally uses the git init command first
   and then checks out all its contents.

Usage 
	git clone <your project URL>

4. git add
	The Git add command will add all the new code files or modified files into your
   repository.

Usage
	
	$ git add your_file_name (add a single file to your staging area)
	$ git add * (add all the modified and new files to the staging area)



5. git commit
	
	Git commit will add your changes to your local repository.

Usage 

	$ git commit -m “your useful commit message”



6. git status 
	This Git command is convenient to see how many files are there which need your 
   attention. 
	You can run this command at any time. 
	You can use it in between Git add, and Git commits to see the status.

Usage 

	$ git status 



7. git branch

	Most of the time, you have multiple branches in your Git repository. 
   In simple terms, the branch is an independent line of code development. 
	With the Git branch command, you can manage your branches effectively. 

Usage 

	(i) To list all branches:
		$ git branch 

	(ii) To create a new branch:
		$ git branch <branch_name>

	(iii) To delete a branch:
		$ git branch -d <branch_name>


8. git checkout
	
	This Git command is used to switch between branches. 
 
Usage

	$ git checkout <branch_name>

	Also, you can create and checkout to a branch in a single like 

		$ git checkout -b <your_new_branch_name>

9. git remote
	Git remote command acts like a border, and If you need to connect
   with the outside world, you have to use the Git remote command.
   This command will connect your local repository to the remote. 

Usage 

	$ git remote add <shortname> <url>


Example

	$ git remote add origin https://dev.azure.com/aCompiler/_git/DemoProject

10. git push
	Once you are connected with the remote repository (with the help of the git 
   remote command), it's time to push your changes to that repository.

Usage 

	$ git push -u <short_name> <your_branch_name>

Example 

	$ git push -u origin feature_branch

	You should have origin and upstream set up before you use Git push. 
   And here is the command to set up upstream.

Usage 

	$ git push --set-upstream <short_name> <branch_name>

Example 

	$ git push --set-upstream origin feature_branch