git add-Moves changes from the working directory to the staging area.
         This gives you the opportunity to prepare a snapshot before committing it to the official history.

git branch-This command is your general-purpose branch administration tool.
           It lets you create isolated development environments within a single repository.

git config-A convenient way to set configuration options for your Git installation.
           Youâ€™ll typically only need to use this immediately after installing Git on a new development machine.

git fetch-Fetching downloads a branch from another repository, along with all 
          of its associated commits and files. But, it doesn't try to integrate anything into your local repository. 
          This gives you a chance to inspect changes before merging them with your project.

git init-Initializes a new Git repository. If you want to place a project under revision control, 
          this is the first command you need to learn.

git log-Lets you explore the previous revisions of a project.
        It provides several formatting options for displaying committed snapshots.

git merge-A powerful way to integrate changes from divergent branches. 
          After forking the project history with git branch, git merge lets you put it back together again.

git rebase-Rebasing lets you move branches around, which helps you avoid unnecessary merge commits.
           The resulting linear history is often much easier to understand and explore.

git reflog-Git keeps track of updates to the tip of branches using a mechanism called reflog. 
           This allows you to go back to changesets even though they are not referenced by any branch or tag.

git reset-Undoes changes to files in the working directory.
         Resetting lets you clean up or completely remove changes that have not been pushed to a public repository.