###################### 10 Git commands and their usage #############################################

1.Git Clone : It is used to download existing source code from a remote repository. It makes an identical copy of the project in a repository and saves it in the computer(local machine)

             git clone <https://repositorylink>

2.Git Branch : We can use the git branch command for creating, listing and deleting branches. Branching is super important for developers to work in parellel on the same project.
             git branch <branch-name>

3.Git Checkout : This is used to switch from one branch to another. It can also be used to checkout files and commits
             
	     git checkout <branch-name>

4.Git add : When we create, modify or delete a file, these changes will happen in our local and won't be included in the next commit. Git add command to include the changes of a file or files into our next commits

	git add .  -> TO add all everytthing  
	git add <filename>    ->To add a particular file

5.Git commit : The git commit command captures a snapshot of the project's currently staged changes. Committed snapshots can be thought of as “safe” versions of a project

	git commit -m "<your message>"

6.Git Push : After committing your changes, the next thing you want to do is send your changes to the remote server. Git push uploads your commits to the remote repository.

	git push <remote> <branch-name>

7.Git status : The Git status command gives us all the necessary information about the current branch. 

	git status

8.Git merge : When you've completed development in your branch and everything works fine, the final step is merging the branch with the parent branch . This is done with the git merge command

	Before merging, its important to checkout to the main branch

	git checkout main
	git merge <branch-name>

9.Git log : It helps us read a history of everything that happens to a repository. The git log command displays all of the commits in a repository’s history
 			It displays SHA,author,date and commit message of each commit in our repository

10. Git revert : This allows us to undo our commits. To undo a commit, we first have to find its hashid. We can do this by using "git log --oneline"

		git log --oneline
		git revert <hashid of the commit>

