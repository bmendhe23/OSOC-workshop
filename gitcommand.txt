1.git branch:This command is your general-purpose branch administration tool. It lets you create isolated development environments within a single repository.
2.git checkout:In addition to checking out old commits and old file revisions, git checkout is also the means to navigate existing branches.
3.git clone:Creates a copy of an existing Git repository. Cloning is the most common way for developers to obtain a working copy of a central repository.
4.git commit:Takes the staged snapshot and commits it to the project history. Combined with git add, this defines the basic workflow for all Git users.
5.git config:A convenient way to set configuration options for your Git installation. Youâ€™ll typically only need to use this immediately after installing Git on a new development machine.
6.git init:Initializes a new Git repository. If you want to place a project under revision control, this is the first command you need to learn.
7.git log:Lets you explore the previous revisions of a project. It provides several formatting options for displaying committed snapshots.
8.git merge:A powerful way to integrate changes from divergent branches. After forking the project history with git branch, git merge lets you put it back together again.
9.git pull:Pulling is the automated version of git fetch. It downloads a branch from a remote repository, then immediately merges it into the current branch.
10.git push:Pushing is the opposite of fetching (with a few caveats). It lets you move a local branch to another repository, which serves as a convenient way to publish contributions. This is like svn commit, but it sends a series of commits instead of a single changeset.
